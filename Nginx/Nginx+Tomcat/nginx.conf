#定义Nginx运行的用户和用户组,windows下不指定
user root;

#nginx进程数,建议设置为等于CPU总核心数.
worker_processes 2;
 
#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]
error_log /usr/local/nginx/logs/error.log;
#error_log /usr/local/nginx/logs/error.log info;
#error_log /usr/local/nginx/logs/error.log notice;

#进程pid文件(进程pid存放路径)
pid /usr/local/nginx/logs/nginx.pid;

#指定进程可以打开的最大描述符:数目
#工作模式与连接数上限
#这个指令是指当一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数(ulimit -n)与nginx进程数相除,但是nginx分配请求并不是那么均匀,所以最好与ulimit -n 的值保持一致.
#现在在linux 2.6内核下开启文件打开数为65535,worker_rlimit_nofile就相应应该填写65535.
#这是因为nginx调度时分配请求到进程并不是那么的均衡,所以假如填写10240,总并发量达到3-4万时就有进程可能超过10240了,这时会返回502错误.
worker_rlimit_nofile 65535;


events
{
    #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,Linux建议epoll,如果跑在FreeBSD上面,就用kqueue模型.
    #补充说明:
    #与apache相类,nginx针对不同的操作系统,有不同的事件模型
    #A)标准事件模型
    #Select、poll属于标准事件模型,如果当前系统不存在更有效的方法,nginx会选择select或poll
    #B)高效事件模型
    #Kqueue:使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃.
    #Epoll:使用于Linux内核2.6版本及以后的系统.
    #/dev/poll:使用于Solaris 7 11/99+,HP/UX 11.22+ (eventport),IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+.
    #Eventport:使用于Solaris 10. 为了防止出现内核崩溃的问题, 有必要安装安全补丁.
    use epoll;

    #单个进程最大连接数(最大连接数=连接数*进程数)
    #根据硬件调整,和前面工作进程配合起来用,尽量大,但是别把cpu跑到100%就行.每个进程允许的最多连接数,理论上每台nginx服务器的最大连接数为.
    worker_connections 65535;
}
 
 
 
#设定http服务器,利用它的反向代理功能提供负载均衡支持
http
{
    #文件扩展名与文件类型映射表
    include mime.types;

    #默认文件类型
    default_type application/octet-stream;

    #默认编码
    #charset utf-8;

    #服务器名字的hash表大小
    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的.参数hash bucket size总是等于hash表的大小,并且是一路处理器缓存大小的倍数.在减少了在内存中的存取次数后,使在处理器中加速查找hash表键值成为可能.如果hash bucket size等于一路处理器缓存的大小,那么在查找键的时候,最坏的情况下在内存中查找的次数为2.第一次是确定存储单元的地址,第二次是在存储单元中查找键 值.因此,如果Nginx给出需要增大hash max size 或 hash bucket size的提示,那么首要的是增大前一个参数的大小.
    server_names_hash_bucket_size 128;

    #客户端请求头部的缓冲区大小.这个可以根据你的系统分页大小来设置,一般一个请求的头部大小不会超过1k,不过由于一般系统分页都要大于1k,所以这里设置为分页大小.分页大小可以用命令getconf PAGESIZE取得.
    client_header_buffer_size 32k;

    #客户请求头缓冲大小.nginx默认会用client_header_buffer_size这个buffer来读取header值,如果header过大,它会使用large_client_header_buffers来读取.
    large_client_header_buffers 4 64k;

    #设定通过nginx上传文件的大小
    client_max_body_size 20m;

    #开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意:如果图片显示不正常把这个改成off.
    #sendfile指令指定 nginx 是否调用sendfile 函数(zero copy 方式)来输出文件,对于普通应用,必须设为on.如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络IO处理速度,降低系统uptime.
    sendfile on;

    #开启目录列表访问,合适下载服务器,默认关闭.
    autoindex on;

    #此选项允许或禁止使用socke的TCP_CORK的选项,此选项仅在使用sendfile的时候使用
    tcp_nopush on;
     
    tcp_nodelay on;

    #长连接超时时间,单位是秒
    keepalive_timeout 600;

    #FastCGI相关参数是为了改善网站的性能:减少资源占用,提高访问速度.下面参数看字面意思都能理解.
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k;    #最小压缩文件大小
    gzip_buffers 4 48k;    #压缩缓冲区
    gzip_http_version 1.0;    #压缩版本(默认1.1,前端如果是squid2.5请使用1.0)
    gzip_comp_level 6;    #压缩等级
	#压缩类型,默认就已经包含textml,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.
    gzip_types text/plain application/x-javascript text/css application/xml image/gif image/jpg image/jpeg image/png image/bmp;
    #跟Squid等缓存服务有关，on的话会在Header里增加"Vary: Accept-Encoding"
	gzip_vary on;

    #开启限制IP连接数的时候需要使用
    #limit_zone crawler $binary_remote_addr 10m;



    #负载均衡配置
    #upstream piao.jd.com {
     
        #upstream的负载均衡,weight是权重,可以根据机器配置定义权重.weigth参数表示权值,权值越高被分配到的几率越大.
        #server 192.168.80.121:80 weight=3;
        #server 192.168.80.122:80 weight=2;
        #server 192.168.80.123:80 weight=3;

        #nginx的upstream目前支持4种方式的分配
        #1、轮询(默认)
        #每个请求按时间顺序逐一分配到不同的后端服务器,如果后端服务器down掉,能自动剔除.
        #2、weight
        #指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况.
        #例如:
        #upstream bakend {
        #    server 192.168.0.14 weight=10;
        #    server 192.168.0.15 weight=10;
        #}
        #2、ip_hash
        #每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题.
        #例如:
        #upstream bakend {
        #    ip_hash;
        #    server 192.168.0.14:88;
        #    server 192.168.0.15:80;
        #}
        #3、fair(第三方)
        #按后端服务器的响应时间来分配请求,响应时间短的优先分配.
        #upstream backend {
        #    server server1;
        #    server server2;
        #    fair;
        #}
        #4、url_hash(第三方)
        #按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,后端服务器为缓存时比较有效.
        #例:在upstream中加入hash语句,server语句中不能写入weight等其他的参数,hash_method是使用的hash算法
        #upstream backend {
        #    server squid1:3128;
        #    server squid2:3128;
        #    hash $request_uri;
        #    hash_method crc32;
        #}

        #tips:
        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{
        #    ip_hash;
        #    server 127.0.0.1:9090 down;
        #    server 127.0.0.1:8080 weight=2;
        #    server 127.0.0.1:6060;
        #    server 127.0.0.1:7070 backup;
        #}
        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;

        #每个设备的状态设置为:
        #1.down表示单前的server暂时不参与负载
        #2.weight为weight越大,负载的权重就越大.
        #3.max_fails:允许请求失败的次数默认为1.当超过最大次数时,返回proxy_next_upstream模块定义的错误
        #4.fail_timeout:max_fails次失败后,暂停的时间.
        #5.backup: 其它所有的非backup机器down或者忙的时候,请求backup机器.所以这台机器压力会最轻.

        #nginx支持同时设置多组的负载均衡,用来给不用的server来使用.
        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug
        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录
        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡
    #}
	
	#虚拟主机的配置
    server
    {
        #监听端口
        listen 443;

        #域名可以有多个,用空格隔开
        server_name cloud.minddt.com;
        index index.html index.htm index.php;
		
		ssl on; 

		ssl_certificate      /usr/local/nginx/cert/1_cloud.minddt.com_bundle.crt;
		ssl_certificate_key  /usr/local/nginx/cert/2_cloud.minddt.com.key;
		ssl_session_timeout 5m;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
        
		location / {
            #root   html;
            #index  index.html index.htm;
            proxy_set_header Host $host;
            proxy_set_header X-Real-Ip $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
			proxy_connect_timeout 600s;
			proxy_send_timeout 600s;
			proxy_read_timeout 600s;
            proxy_pass http://127.0.0.1:8090;
        }
		
		location /images/ {
            alias /data/wwwroot/default/img/images/;
			autoindex on;
			expires 15d;
            #set $s $1;
            #set $w $2;
            #set $h $3;
            #image_filter resize $w $h;
            #image_filter_buffer 10M;
            #rewrite ^/image_data/(.*)$ /image_data/$s.jpg break;
        }
		
		location /dl_image/ {
            alias /zhaotoubiao/enterStorageImage/;
			autoindex on;
			expires 15d;
            #set $s $1;
            #set $w $2;
            #set $h $3;
            #image_filter resize $w $h;
            #image_filter_buffer 10M;
            #rewrite ^/image_data/(.*)$ /image_data/$s.jpg break;
        }
		
		location /youliaoImage/ {
            alias /data/wwwroot/default/img/youliao/;
			autoindex on;
			expires 15d;
            #set $s $1;
            #set $w $2;
            #set $h $3;
            #image_filter resize $w $h;
            #image_filter_buffer 10M;
            #rewrite ^/image_data/(.*)$ /image_data/$s.jpg break;
        }
		
		location /officeMuddle/ {
            alias /data/wwwroot/default/img/officeMuddle/;
			autoindex on;
			expires 15d;
            #set $s $1;
            #set $w $2;
            #set $h $3;
            #image_filter resize $w $h;
            #image_filter_buffer 10M;
            #rewrite ^/image_data/(.*)$ /image_data/$s.jpg break;
        }
    }
	
	server
    {
        #监听端口
        listen 443;

        #域名可以有多个,用空格隔开
        server_name file1.minddt.com;
        index index.html index.htm index.php;
		
		ssl on; 

		ssl_certificate      /usr/local/nginx/cert/1_cloud.minddt.com_bundle.crt;
		ssl_certificate_key  /usr/local/nginx/cert/2_cloud.minddt.com.key;
		ssl_session_timeout 5m;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
        
		location / {
            #root   html;
            #index  index.html index.htm;
            proxy_set_header Host $host;
            proxy_set_header X-Real-Ip $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass http://127.0.0.1:8081;
        }
    }
}